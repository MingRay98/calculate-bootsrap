{"version":3,"sources":["App.js","component/DisplayBlock.js","component/Buttons.js","serviceWorker.js","index.js"],"names":["emitter","eventemitter","lastOperation","lastChar","App","props","addNum","input","num","state","displaytext","split","sum","parseFloat","setState","minusNum","toString","charAt","multiplyNum","Number","toFixed","divisorNum","handleNumClick","lastTwoChar","slice","length","alert","isNaN","dt","substring","eval","e","handleDelete","delteChar","handleClear","handleCalculate","addListener","this","alignContent","className","Component","React","DisplayBlock","Buttons","operationColorStyle","borderRadius","backgroundColor","em","emClick","emitEvent","target","value","onClick","style","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.310b5964.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport DisplayBlock from './component/DisplayBlock'\nimport Buttons from './component/Buttons'\nimport eventemitter from 'wolfy87-eventemitter'\n\nlet emitter = new eventemitter();\nlet lastOperation = ''\nlet lastChar = ''\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      displaytext: '0',\n    };\n  }\n\n  componentDidMount() {\n    emitter.addListener('handleNumClick', this.handleNumClick);\n    emitter.addListener('handleCalculate', this.handleCalculate);\n    emitter.addListener('handleClear', this.handleClear);\n    emitter.addListener('handleDelete', this.handleDelete);\n  }\n\n  addNum = (input) => {\n    const num = this.state.displaytext.split('+');\n    const sum = parseFloat(num[0]) + parseFloat(num[1]);\n    this.setState({ displaytext: sum + input })\n  }\n\n  minusNum = (input) => {\n    const displaytext = this.state.displaytext;\n    let num = '', sum = '';\n    //handle negative Num\n    if (displaytext.toString().charAt(0) === '-') {\n      num = this.state.displaytext.split('-');\n      sum = -parseFloat(num[1]) - parseFloat(num[2]);\n    }\n    else {\n      num = this.state.displaytext.split('-');\n      sum = parseFloat(num[0]) - parseFloat(num[1]);\n    }\n    this.setState({ displaytext: sum + input })\n  }\n\n  multiplyNum = (input) => {\n    const num = this.state.displaytext.split('*');\n    let sum = parseFloat(num[0]) * parseFloat(num[1]);\n    sum = Number(parseFloat(sum).toFixed(10));\n    this.setState({ displaytext: sum + input })\n  }\n\n  divisorNum = (input) => {\n    const num = this.state.displaytext.split('/');\n    let sum = (parseFloat(num[0]) / parseFloat(num[1]));\n    sum = Number(parseFloat(sum).toFixed(10));\n    this.setState({ displaytext: sum.toString() + input.toString() })\n  }\n\n  handleNumClick = (input) => {\n    const displaytext = this.state.displaytext;\n    const lastTwoChar = displaytext.toString().slice(displaytext.length - 2, displaytext.length - 1);\n    //input too many input\n    if (displaytext.length > 12)\n      return alert(\"too much\")\n    //DeBug for zero after operation \n    if (isNaN(lastTwoChar) && lastTwoChar !== '.' && lastChar === '0' && !isNaN(input)) {\n      let dt = displaytext.substring(0, displaytext.length - 1) + input\n      this.setState({ displaytext: dt })\n      return lastChar = input\n    }\n    //If input is symbol \n    if (isNaN(input)) {\n      if (isNaN(lastChar))\n        return alert('double symbol');\n      if (input === '.') {\n        try {\n          isNaN(eval(displaytext + \".\"))\n        }\n        catch (e) {\n          return alert('double dot');\n        }\n      }\n      if (input === '%') {\n        let sum = eval(displaytext) / 100\n        sum = Number(parseFloat(sum).toFixed(10));\n        return this.setState({ displaytext: sum })\n      }\n      else if (lastOperation === '' || input === '.')\n        this.setState({ displaytext: displaytext + input });\n      else {\n        if (lastOperation === '+')\n          this.addNum(input);\n        if (lastOperation === '-')\n          this.minusNum(input);\n        if (lastOperation === '*')\n          this.multiplyNum(input);\n        if (lastOperation === '/')\n          this.divisorNum(input);\n      }\n      if (input !== \".\") lastOperation = input;\n    }\n    //input Num\n    if (!isNaN(input) && displaytext === '0')\n      this.setState({ displaytext: input })\n    else if (!isNaN(input))\n      this.setState({ displaytext: displaytext + input })\n\n    lastChar = input;\n  }\n\n  handleDelete = () => {\n    let displaytext = this.state.displaytext;\n    const delteChar = displaytext.charAt(displaytext.length - 1)\n    //if delte operation remove lastOperation\n    if (delteChar === '+' || delteChar === '-' || delteChar === '/' || delteChar === '*')\n      lastOperation = \"\";\n    // if display is Null show 0\n    displaytext = displaytext.toString().slice(0, -1);\n    displaytext.toString().length < 1 ?\n      this.setState({ displaytext: '0' }) :\n      this.setState({ displaytext: displaytext })\n\n    lastChar = displaytext.charAt(displaytext.length - 1);\n  }\n\n  handleClear = () => {\n    lastOperation = '';\n    lastChar = '';\n    this.setState({ displaytext: '0' })\n  }\n\n  handleCalculate = () => {\n    if (isNaN(lastChar))\n      return alert('Error Input')\n    let sum = eval(this.state.displaytext.toString());\n    sum = Number(parseFloat(sum).toFixed(10));\n    this.setState({ displaytext: sum.toString() })\n    lastOperation = '';\n    lastChar = '';\n  }\n\n  render() {\n    return (\n      <div alignContent=\"center\">\n        <div className='FirstContainer' >\n          <DisplayBlock Component={this.state.displaytext} />\n          <Buttons emitter={emitter} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\n\r\nclass DisplayBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {  };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='DisplayBlock' >\r\n      {this.props.Component}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayBlock;","import React, { Component } from 'react';\r\n\r\nclass Buttons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  operationColorStyle = {\r\n    borderRadius: '5rem',\r\n    backgroundColor: 'rgb(255, 123, 0)'\r\n  }\r\n\r\n  render() {\r\n    let em = this.props.emitter;\r\n    const emClick = (e)=>{em.emitEvent('handleNumClick',[e.target.value])};\r\n    const emCalculate = ()=>em.emitEvent('handleCalculate');\r\n    const emClear = ()=>em.emitEvent('handleClear');\r\n    const emDelete = ()=> em.emitEvent('handleDelete');\r\n\r\n    return (\r\n      <div >\r\n        <div className='OperationTopBtn' >\r\n          <button className='Btn' onClick={emClear} style={{ borderRadius: '5rem', backgroundColor: 'white', color: 'red' }}>C</button>\r\n          <button className='Btn' onClick={emClick} value='%' style={this.operationColorStyle}>%</button>\r\n          <button className='Btn' onClick={emClick} value='/' style={this.operationColorStyle}>/</button>\r\n          <button className='Btn' onClick={emClick} value='*' style={this.operationColorStyle}>X</button>\r\n        </div>\r\n        <div className='SecondContainer' >\r\n          <div className='NumBtnDiv'>\r\n            <div className='NumBtnInColumn'>\r\n              <button className='Btn' onClick={emClick} value='1'>1</button>\r\n              <button className='Btn' onClick={emClick} value='2'>2</button>\r\n              <button className='Btn' onClick={emClick} value='3'>3</button>\r\n            </div>\r\n\r\n            <div className='NumBtnInColumn'>\r\n              <button className='Btn' onClick={emClick} value='4'>4</button>\r\n              <button className='Btn' onClick={emClick} value='5'>5</button>\r\n              <button className='Btn' onClick={emClick} value='6'>6</button>\r\n            </div>\r\n\r\n            <div className='NumBtnInColumn'>\r\n              <button className='Btn' onClick={emClick} value='7'>7</button>\r\n              <button className='Btn' onClick={emClick} value='8'>8</button>\r\n              <button className='Btn' onClick={emClick} value='9'>9</button>\r\n            </div>\r\n\r\n            <div className='NumBtnInColumn' >\r\n              <button onClick={emDelete} className='Btn' style={{ backgroundColor: 'rgb(52, 56, 106)' ,borderRadius:'5rem'}} >←</button>\r\n              <button onClick={emClick} className='Btn' value='0'>0</button>\r\n              <button onClick={emClick} className='Btn' value='.'>．</button>\r\n            </div>\r\n\r\n          </div>\r\n          <div className='OperationRigthBtn'>\r\n            <div className='OperationRigthBtnPM'>\r\n              <button className='Btn' onClick={emClick} value='+' style={this.operationColorStyle} >+</button>\r\n              <button className='Btn' onClick={emClick} value='-' style={this.operationColorStyle} >-</button>\r\n            </div>\r\n            <button className='BigEnter' onClick={emCalculate} >=</button>\r\n          </div>\r\n        </div>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}