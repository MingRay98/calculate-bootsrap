{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","checkOverFloat","state","displaytext","toString","length","alert","lastCharIsNaN","temp","lastChar","charAt","isNaN","handleNumClick","e","target","value","dispStr","strictMode","Number","setState","eval","console","log","handleDelete","slice","handleClear","handleCalculate","indexOf","parseFloat","toFixed","btnStyle","borderRadius","backgroundColor","alignContent","className","this","onClick","style","color","border","width","React","Component"],"mappings":"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","file":"static/js/main.0175fbe3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displaytext: '0',\n      strictMode:'false'\n    };\n\n  }\n\n  checkOverFloat = () => {\n    if (this.state.displaytext.toString().length >= 12) {\n      alert('OverFlow');\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  lastCharIsNaN = () => {\n    const temp = this.state.displaytext.toString();\n    const lastChar = temp.charAt(temp.length - 1);\n    return isNaN(lastChar);\n  }\n\n  handleNumClick = (e) => {\n\n    const temp = e.target.value;\n    const dispStr = this.state.displaytext.toString();\n\n    if(this.state.strictMode ==='true' && dispStr.charAt(dispStr.length - 1)==='0'&& Number(temp)&& dispStr.length >2){\n        return alert('運算符號後的0只能加小數點')\n    }\n\n    if (isNaN(temp) === true && this.lastCharIsNaN() === true)  // 連續符號\n      return\n\n    if (isNaN(temp) === true && this.state.displaytext === '0'  ) // 為零時不能有符號\n      return temp!=='%' ? this.setState({ displaytext: '0' + temp }) : null;\n\n    if (isNaN(temp)) { \n\n      this.state.strictMode = 'true';\n\n      if (temp === '.')\n        try {\n          isNaN(eval(this.state.displaytext + \".\"))\n        }\n        catch (e) {\n          return alert('雙重點數點');\n        }\n    }\n\n    if(Number(temp)&& temp!=='0' ){\n\n      this.state.strictMode ='false';\n\n    }\n\n    if (this.checkOverFloat() === true) //textbox 檢查是否過長\n      return\n\n\n    if (temp === '0' && this.state.displaytext === '0') // 為零時，按0無效\n      return\n\n    if (temp === '%' && Number(eval(this.state.displaytext))) {  //%運算元 如果eval計算出來是數字，則一次%完 停止做以下事情\n      this.setState({ displaytext: eval(this.state.displaytext) / 100 });\n      // console.log('%%%')\n      return\n    }\n\n    this.state.displaytext === '0' ? //為零時，按數字直接等於display的state，非零時用字串加上去。\n      this.setState({ displaytext: temp }) :\n      this.setState({ displaytext: this.state.displaytext + temp });\n    console.log(e.target.value);\n  }\n\n  handleDelete = () => {\n    let temp = this.state.displaytext.toString().slice(0, -1);\n    this.state.displaytext.toString().length === 1 ?\n      this.setState({ displaytext: '0' }) :\n      this.setState({ displaytext: temp })\n  }\n\n  handleClear = () => {\n    this.setState({ displaytext: '0' })\n  }\n\n  handleCalculate = () => {\n    let temp = eval(this.state.displaytext.toString());\n    if (temp.toString().indexOf('.') == true) {\n      temp = Number(parseFloat(temp).toFixed(10));\n    }\n    this.setState({ displaytext: temp.toString() })\n  }\n\n\n  btnStyle = {\n    borderRadius: '5rem',\n    backgroundColor: 'rgb(255, 123, 0)',\n\n  }\n\n  render() {\n\n\n\n\n\n    return (\n\n      <div alignContent=\"center\">\n        <div className='FirstContainer' >\n          <div className='DisplayBlock' >\n            {this.state.displaytext}\n          </div>\n          <div className='OperationTopBtn' >\n            <button className='Btn' onClick={this.handleClear} style={{ borderRadius: '5rem', backgroundColor: 'white', color: 'red' }}>C</button>\n            <button className='Btn' onClick={this.handleNumClick} value='%' style={this.btnStyle}>%</button>\n            <button className='Btn' onClick={this.handleNumClick} value='/' style={this.btnStyle}>/</button>\n            <button className='Btn' onClick={this.handleNumClick} value='*' style={this.btnStyle}>X</button>\n          </div>\n          <div className='SecondContainer' >\n            <div className='NumBtnDiv'>\n              <div className='NumBtnInColumn'>\n                <button className='Btn' onClick={this.handleNumClick} value='1'>1</button>\n                <button className='Btn' onClick={this.handleNumClick} value='2'>2</button>\n                <button className='Btn' onClick={this.handleNumClick} value='3'>3</button>\n              </div>\n\n              <div className='NumBtnInColumn'>\n                <button className='Btn' onClick={this.handleNumClick} value='4'>4</button>\n                <button className='Btn' onClick={this.handleNumClick} value='5'>5</button>\n                <button className='Btn' onClick={this.handleNumClick} value='6'>6</button>\n              </div>\n\n              <div className='NumBtnInColumn'>\n                <button className='Btn' onClick={this.handleNumClick} value='7'>7</button>\n                <button className='Btn' onClick={this.handleNumClick} value='8'>8</button>\n                <button className='Btn' onClick={this.handleNumClick} value='9'>9</button>\n              </div>\n\n              <div className='NumBtnInColumn' >\n                <button onClick={this.handleDelete} style={{ backgroundColor: 'rgb(52, 56, 106)', borderRadius: '5rem', border: 'none', width: '95%' }} >←</button>\n                <button onClick={this.handleNumClick} className='Btn' value='0'>0</button>\n                <button onClick={this.handleNumClick} className='Btn' value='.'>．</button>\n              </div>\n\n\n            </div>\n            <div className='OperationRigthBtn'>\n              <div className='OperationRigthBtnPM'>\n                <button className='Btn' onClick={this.handleNumClick} value='+' style={this.btnStyle} >+</button>\n                <button className='Btn' onClick={this.handleNumClick} value='-' style={this.btnStyle} >-</button>\n              </div>\n\n              <button className='BigEnter' onClick={this.handleCalculate} >=</button>\n\n\n            </div>\n          </div>\n        </div >\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}