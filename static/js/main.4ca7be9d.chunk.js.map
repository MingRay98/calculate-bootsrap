{"version":3,"sources":["App.js","component/DisplayBlock.js","component/Buttons.js","serviceWorker.js","index.js"],"names":["App","props","checkOverFloat","state","displaytext","toString","length","alert","lastCharIsNaN","temp","lastChar","charAt","isNaN","handleNumClick","e","target","value","dispStr","strictMode","Number","eval","setState","console","log","toFixed","handleDelete","slice","handleClear","handleCalculate","indexOf","parseFloat","alignContent","className","Component","this","React","DisplayBlock","Buttons","btnStyle","borderRadius","backgroundColor","onClick","style","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ca7be9d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport DisplayBlock from './component/DisplayBlock'\nimport Buttons from './component/Buttons'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displaytext: '0', //運算數值\n      strictMode: 'false' //符號檢查模式\n    };\n  }\n\n  checkOverFloat = () => { //檢查是否超出可顯示介面 回傳布林值\n    if (this.state.displaytext.toString().length >= 12) {\n      alert('OverFlow');\n      return true;\n    } else\n      return false;\n  }\n\n  lastCharIsNaN = () => { //檢查最後一個字元是否為符號\n    const temp = this.state.displaytext.toString();\n    const lastChar = temp.charAt(temp.length - 1);\n    return isNaN(lastChar);\n  }\n\n  handleNumClick = (e) => {\n\n    const temp = e.target.value;\n    const dispStr = this.state.displaytext.toString();\n\n    //嚴格模式下  數字 +06  || /09 || *00005 || - 00687 會導致 eval函數出錯，運算元後的 0 只能加小數點否則會跳出警告。 \n    if (this.state.strictMode === 'true' && dispStr.charAt(dispStr.length - 1) === '0' && Number(temp) && dispStr.length > 2) {\n      return alert('運算符號後的0只能加小數點')\n    }\n    if (isNaN(temp) === true && this.lastCharIsNaN() === true)  // 無效化連續符號\n      return\n    if (isNaN(temp)) {  //按運算元時，檢查是否雙重小數點，及開啟嚴格模式\n      if (temp === '.')\n        try {\n          isNaN(eval(this.state.displaytext + \".\"))\n        }\n        catch (e) {\n          return alert('雙重點數點');\n        } else\n          this.state.strictMode = 'true';\n    }\n    if (isNaN(temp) === false && temp !== '0') { //按非零時數字，解除嚴格模式。\n      this.state.strictMode = 'false';\n    }\n    if (this.checkOverFloat() === true) //textbox 檢查是否過長\n      return\n    if (temp === '0' && this.state.displaytext === '0') // 為零時，按0無效\n      return\n    if (temp === '%') {  //%運算元 如果eval計算出來是數字，則一次%完 停止做以下事情\n      let temp = eval(this.state.displaytext) / 100\n      this.setState({ displaytext: Number(temp.toFixed(10)).toString() });\n      return\n    }\n\n    this.state.displaytext === '0' && isNaN(temp) === false ?\n      this.setState({ displaytext: temp }) : //為0時，數字時直接覆蓋\n      this.setState({ displaytext: this.state.displaytext + temp }); //非0時，直接加上去\n    console.log(e.target.value);\n  }\n\n  handleDelete = () => {\n    let temp = this.state.displaytext.toString().slice(0, -1);\n    this.state.displaytext.toString().length === 1 ?\n      this.setState({ displaytext: '0' }) :\n      this.setState({ displaytext: temp })\n  }\n\n  handleClear = () => {\n    this.setState({ displaytext: '0' })\n  }\n\n  handleCalculate = () => {\n    let temp = eval(this.state.displaytext.toString());\n    if (temp.toString().indexOf('.') == true) {\n      temp = Number(parseFloat(temp).toFixed(10));\n    }\n    this.setState({ displaytext: temp.toString() })\n  }\n\n  render() {\n    return (\n      <div alignContent=\"center\">\n        <div className='FirstContainer' >\n          <DisplayBlock Component={this.state.displaytext} />\n          <Buttons handleCalculate={this.handleCalculate} handleClear={this.handleClear} handleDelete={this.handleDelete} handleNumClick={this.handleNumClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\n\r\nclass DisplayBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {  };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='DisplayBlock' >\r\n      {this.props.Component}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayBlock;","import React, { Component } from 'react';\r\n\r\nclass Buttons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  \r\n  btnStyle = {\r\n    borderRadius: '5rem',\r\n    backgroundColor: 'rgb(255, 123, 0)'\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div >\r\n        <div className='OperationTopBtn' >\r\n          <button className='Btn' onClick={this.props.handleClear} style={{ borderRadius: '5rem', backgroundColor: 'white', color: 'red' }}>C</button>\r\n          <button className='Btn' onClick={this.props.handleNumClick} value='%' style={this.btnStyle}>%</button>\r\n          <button className='Btn' onClick={this.props.handleNumClick} value='/' style={this.btnStyle}>/</button>\r\n          <button className='Btn' onClick={this.props.handleNumClick} value='*' style={this.btnStyle}>X</button>\r\n        </div>\r\n        <div className='SecondContainer' >\r\n          <div className='NumBtnDiv'>\r\n            <div className='NumBtnInColumn'>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='1'>1</button>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='2'>2</button>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='3'>3</button>\r\n            </div>\r\n\r\n            <div className='NumBtnInColumn'>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='4'>4</button>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='5'>5</button>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='6'>6</button>\r\n            </div>\r\n\r\n            <div className='NumBtnInColumn'>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='7'>7</button>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='8'>8</button>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='9'>9</button>\r\n            </div>\r\n\r\n            <div className='NumBtnInColumn' >\r\n              <button onClick={this.props.handleDelete} className='Btn' style={{ backgroundColor: 'rgb(52, 56, 106)' ,borderRadius:'5rem'}} >←</button>\r\n              <button onClick={this.props.handleNumClick} className='Btn' value='0'>0</button>\r\n              <button onClick={this.props.handleNumClick} className='Btn' value='.'>．</button>\r\n            </div>\r\n\r\n\r\n          </div>\r\n          <div className='OperationRigthBtn'>\r\n            <div className='OperationRigthBtnPM'>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='+' style={this.btnStyle} >+</button>\r\n              <button className='Btn' onClick={this.props.handleNumClick} value='-' style={this.btnStyle} >-</button>\r\n            </div>\r\n\r\n            <button className='BigEnter' onClick={this.props.handleCalculate} >=</button>\r\n\r\n\r\n          </div>\r\n        </div>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}